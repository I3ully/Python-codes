import random
import math
from random import randrange



'''ნინისთან ცხოვრობს ოთხი ძაღლი (ჯეკა, ტობი, ციცქნა, მოკა) და ერთი კატა (ციცი).
თქვენი ამოცანაა დაწეროთ ფუნქცია, რომელიც გამოთვლის ცხოველების ასაკს.
ფუნქციას არგუმენტად უნდა გადასცეთ თითოეული ცხოველისთვის შესაბამისი
„ადამიანური ასაკი“ და დააბრუნოს რეალურად რამდენი წლისაა ცხოველი.
საბოლოოდ უნდა დაიბეჭდოს რამდენი წლისაა თითოეული ცხოველი.
გაითვალისწინეთ: ძაღლის შემთხვევაში, პირველი „ადამიანური წელი“ შეადგენს ძაღლის 15
წელს, მეორე წელი არის 9 წლის ექვივალენტი, ხოლო ყველა მომდევნო წელი − +5 წელი.
რაც შეეხება კატას, საწყისი ორი წელი იდენტურია, რაც ძაღლთან, ხოლო მესამე წლიდან +4
წელი.
მაგალითად, თუ ციცი სამი ადამიანური წლისაა, მისი ასაკი, 15+9+4, ანუ 28 გამოდის.'''



def animal(age, x):
    if age <= 1:
        return age * 15
    elif age <= 2:
        return (age-1) * 9 + 15
    else: return (age-2) * x + 24

cxoveli = input('zaRli tu kata: ')
asaki = float(input('ramdeni wlisaa: '))

if cxoveli == 'zaRli':
    print('zagli aris {} adamianuri wlis'.format(animal(asaki,5)))
if cxoveli == 'kata':
    print('kata aris {} adamianuri wlis'.format(animal(asaki,4)))



'''გაქვთ ჩემპიონთა ლიგის გამარჯვებულების სია. თქვენი ამოცანაა დაწეროთ ფუნქცია,
რომელსაც გადასცემთ აღნიშნულ სიას და დამატებით ერთ არგუმენტს (season, team ან
country). თუ არგუმენტად გადაეცემა სეზონი, ამ შემთხვევაში უნდა დაიბეჭდოს არჩეული
სეზონის გამარჯვებული. თუ გადავცემთ გუნდს - დაიბეჭდოს მოცემულ პერიოდში
რამდენჯერ გაიმარჯვა ამ გუნდმა, ხოლო ქვეყნის შემთხვევაში - რამდენჯერ გახდა ამ ქყვეყნის
წარმომადგენელი ჩემპიონი.
მაგალითად, თუ მეორე არგუმენტად გადავცემთ სეზონს 2002-03, უნდა დაბეჭდოს AC Milan.
თუ გადავცემთ გუნდს, მილანს, დაბეჭდოს 2. თუ გადავცემთ ქვეყანას იტალიას, დაბეჭდოს 3.'''


# leagueWinners = [
# {'season':'1999-00', 'team':'Real Madrid', 'country':'Spain'},
# {'season':'2000-01', 'team':'Bayern Munich', 'country':'Germany'},
# {'season':'2001-02', 'team': 'Real Madrid', 'country':'Spain'},
# {'season':'2002-03', 'team':'AC Milan', 'country':'Italy'},
# {'season':'2003-04', 'team':'Porto', 'country':'Portugal'},
# {'season':'2004-05', 'team':'Liverpool', 'country':'England'},
# {'season':'2005-06', 'team':'Barcelona', 'country':'Spain'},
# {'season':'2006-07', 'team':'AC Milan', 'country':'Italy'},
# {'season':'2007-08', 'team':'Manchester United', 'country':'England'},
# {'season':'2008-09', 'team':'Barcelona', 'country':'Spain'},
# {'season':'2009-10', 'team':'Inter Milan', 'country':'Italy'}]



# def func(lst, seas=None, team=None, country=None):
#     if seas:
#         for i in lst:
#             if seas in i.values():
#                 return (i['team'])
#     elif team:
#         for i in lst:
#             if team in i.values():
#                 return len(i)
#     elif country:
#         for i in lst:
#             if country in i.values():
#                 return len(i)
# print(func(leagueWinners, team='Real Madrid'))


'''დაწერეთ ფუნქცია, რომელიც იღებს რიცხვს და დაპრინტავს რიცხვის შესაბამის
ფლოიდის სამკუთხედს.
ფლოიდის სამკუთხედი 5-ზე გამოიყურება შემდეგნაირად:
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15.'''
# from random import randrange
# def func(x):
#     num=1
#     for i in range(1,x+1):
#         for j in range(i):
#             print(num,end=' ')
#             num += 1
#         print('')
# func(randrange(3,10))


'''დაწერეთ ფუნქცია, რომელსაც გადაეცემა შემთხვევითობის პრინციპით
დაგენერირებული 10 ელემენტიანი სია და ასევე, ერთი ან ორი რიცხვი, რომლებიც
იქნებიან სიის ინდექსები. თუ მხოლოდ ერთ რიცხვს გადავცემთ, სია უნდა დაალაგოს
ზრდადობით ამ ინდექსზე მყოფი ელემენტიდან ბოლომდე, ხოლო თუ ორს - მაშინ მათ
დიაპაზონში.'''

# from random import randrange

# mylist = [randrange(15) for i in range(10)]
# index1 = randrange(1,5)
# index2 = randrange(5,11)
# print(mylist, index1, index2)

# def func(lst, i1=None, i2=None):
#     if i2:
#         lst[i1:i2] = sorted(lst[i1:i2])
#         return lst
#     lst[i1:] = sorted(lst[i1:])
#     return lst
# print(func(mylist, index1))


'''დააგენერირეთ შემთხვევითი რიცხვი 5-15 დიაპაზონში და შექმენით ამდენ ელემენტიანი
სია. მიღებული სია უნდა გადასცეთ ფუნქციას, რომელიც შეამოწმებს რამდენ
ელემენტიანია. თუ ელემენტების რაოდენობა კენტია, შუა ელემენტს ამოიღებს და
დარჩენილ ელემენტებს გამოაკლებს. თუ ელემენტების რაოდენობა ლუწია - ბოლო
ელემენტს წაშლის და ამის შემდეგ შეასრულებს მოქმედებებს. მიღებული შედეგი კი უნდა
დაბრუნდეს კორტეჟის სახით. მაგალითად: x = 5 ==> [1,2,3,4,5] ==> (-2,-1,1,2); x = 6 ==>
[1,2,3,4,5,6] ==> [1,2,3,4,5] ==> (-2,-1,1,2).'''
# from random import randrange
# mylist = [randrange(20) for i in range(randrange(5,15))]
# print(mylist)
    
# def func(lst):
#     mytuple = ()
#     a = lst[len(lst) // 2]
#     lst.remove(a)
#     for i in lst:
#         mytuple += (i - a),
#     return mytuple

# def main(m):
#     if len(m) % 2 == 0:
#         m.pop(-1)
#         return func(m)
#     return func(m)
# print(main(mylist))


'''დააგენერირეთ შემთხვევითი რიცხვი 5-15 დიაპაზონში და შექმენით ამდენ
განზომილებიანი მატრიცა. აღნიშნული მატრიცა უნდა გადასცეთ ფუნქციას, რომელიც
მატრიცის სვეტებს ახალ მატრიცაში გადაწერს ჰორიზონტალურად და დააბრუნებს.
მაგალითად: 3x3 ==> [[1,2,3],[4,5,6],[7,8,9]] ==> [[1,4,7],[2,5,8],[3,6,9]].'''

# from random import randrange
# x = 3
# matrix = [[randrange(20) for i in range(x)]for i in range(x)]
# print(matrix)
# def matr(num):
#     s = []
#     for i in range(len(num)):
#         l = []
#         for j in range(len(num)):
#             l.append(num[j][i])
#         s.append(l)
#     return s
# print(matr(matrix))

'''შემთხვევითობის პრინციპით შექმენით 3x3 მატრიცა, სადაც ელემენტები იქნებიან
მხოლოდ 0 და 1. აღნიშნული მატრიცა უნდა გადასცეთ ფუნქციას, რომელიც შეამოწმებს

და თითოეული ჰორიზონტალური სეგმენტიდან ამოიღებს განსხვავებულ ელემენტს
გადაწერს კორტეჟში და დააბრუნებს. იმ შემთხვევაში, თუ სეგმენტში სამივე ელემენტი
იდენტურია, კორტეჟში უნდა გადაიტანოს საპირისპირო ელემენტი. მაგალითად: [[0, 1, 1],
[1, 1, 1], [1, 0, 0]] ==> (0, 0, 1).'''

# lst = [[randrange(2) for i in range(3)] for i in range(3)]
# print(lst)
# def matrix(num):
#     result = ()
#     for i in num:
#         if i.count(i[0]) == 3:
#             if i[0] == 0: result += 1,
#             else: result += 0,
#         elif i.count(i[0]) != 3:
#             s = {}
#             for j in i:
#                 count_j = i.count(j)
#                 s[count_j] = j
#             result += s[min(s.keys())],
#     return result
# print(matrix(lst))


'''დაწერეთ ფუნქცია, რომელსაც გადაეცემა 10000-1000000 დიაპაზონში დაგენერირებული
შემთხვევითი რიცხვი და დაითვლის მის ციფრთა ჯამს. იმ შემთხვევაში, თუ მიღებული
ციფრთა ჯამი ორ ან მეტნიშნა რიცხვია, უნდა გაიმეოროთ იგივე, ვიდრე საბოლოო
ციფრთა ჯამი არ იქნება ერთი ციფრისგან შემდგარი. მაგალითად:12345 ==> 15 ==> 6.'''

# x = randrange(10000,100000)
# def func(n):
#     if n > 9:
#         num = sum([int(i) for i in str(n)])
#         if num < 9:
#             return num
#         return func(num)
#     else:
#         return n
# print(func(x))
 
'''დაწერეთ ფუნქცია, რომელსაც გადაეცემა 10000-1000000 დიაპაზონში დაგენერირებული
შემთხვევითი რიცხვი. ფუნქციამ რიცხვის პირველი ციფრი უნდა გაყოს 1-ზე, პირველი
ორი ციფრი 2-ზე, პირველი სამი ციფრი 3-ზე და ა.შ. თუ რომელიმე განაყოფი იქნება
ათწილადი - დაამრგვალეთ. საბოლოოდ კორტეჟის სახით უნდა დააბრუნოს მიღებული
შედეგები. მაგალითად: 12345 ==> 1/1, 12/2, 123/3, 1234/4, 12345/5.'''

# x = randrange(10000,1000000)
# def func(n):
#     mytuple = ()
#     for i in range(1, len(n)+1):
#         mytuple += round(int(n[:i])/i),
#     return mytuple
# print(func(str(x)))

'''გაქვთ სია, მაგალითად a = [1,2,3,4,7,5,6,9,8,10]. თქვენი ამოცანაა, დაწეროთ ფუნქცია,
რომელიც დაამუშავებს სიას და იპოვის ელემენტებს, რომლებიც არღვევენ
თანმიმდევრობას და კორტეჟის სახით დააბრუნებს. აღნიშნული სიის მაგალითზე შედეგი
უნდა იყოს (7, 9).
'''

# a = [1,2,3,4,7,5,6,9,8,10]
# def func(lst):
#     result = ()
#     for i in range(1, len(lst)):
#         if lst[i] < lst[i-1]:
#             result += lst[i - 1],
#     return result
# print(func(a))


'''დაწერეთ ფუნქცია, რომელსაც გადასცემთ შემთხვევით რიცხვს 100-1000 დიაპაზონში და
დათვლის, რამდენი ცდაა საჭირო 2-ზე გაყოფის შედეგად 1-მდე მისასვლელად.
საბოლოოდ უნდა დააბრუნოს, განაყოფების საშუალო არითმეტიკული. მაგალითად: 10
==> 10/2 ==> 5/2 ==> 2(1)/2 = 1 ==> 17.5/3.'''

# from random import randrange

# x = randrange(100, 1000)

# def func(a):
#     s = [a]
#     while a != 1:
#         a = a // 2  # Corrected this line to update the value of 'a'
#         s.append(a)
#     return len(s[:-1]), sum(s[:-1]) / len(s[:-1])

# print(func(x))


'''დაწერეთ ფუნქცია, რომელსაც გადასცემთ შემთხვევით რიცხვს 1000-10000 დიაპაზონში.
ფუნქციამ აღნიშნული რიცხვი უნდა შეცვალოს რამდენჯერმე და თითოეული ცვლილება
შეინახოს კორტეჟში. ცვლილება უნდა იყოს შემდეგი: პირველ ჯერზე უცვლელი რჩება
პირველი ციფრი და რევერსულად იცვლება დარჩენილი ნაწილი, მეორე ჯერზე
უცვლელად რჩება პირველი ორი ციფრი და დარჩენილი ნაწილი ტრიალდება, მესამე
ჯერზე - საწყისი სამი ციფრია უცვლელი და ა.შ. საბოლოოდ ფუნქციამ უნდა დააბრუნოს
კორტეჟი, სადაც მითითებული იქნება რიცხვის თითოეული ტრანსფორმაცია.
მაგალითად: 12345 ==> (15432, 15234, 15243).'''


# a = randrange(1000,10000)
# print(a)
# def func(x):
#     result = ()
#     for i in range(1, len(x)-1):
#         x = x[:i] + x[i:][::-1]
#         result += int(x),
#     return result
# print(func(str(a)))


'''დაწერეთ ფუნქცია, რომელსაც გადაეცემა შემთხვევითობის პრინციპით
დაგენერირებული 20 ელემენტიანი სია და დააბრუნებს უნიკალური ელემენტების ჯამს.
გაითვალისწინეთ, ახალი სიის ან სხვა რომელიმე სტუქტურის შექმნის, ან ელემენტის
დამთვლელი მეთოდების გამოყენების უფლება არ გაქვთ.'''
    
# lst = [randrange(20) for i in range(20)]
# print(lst)
# def func(x):
#     sum = 0
#     for i in range(len(x)):
#         if x[i] not in x[i+1:]:
#             print(x[i], end=' ')
#             sum += x[i]
#     return sum
# print(func(lst))


'''დაწერეთ ფუნქცია, რომელსაც გადაეცემა რიცხვი და ლექსიკონის სახით დააბრუნებს
შესაბამის ფიბონაჩის რიცხვებს. ფიბონაჩის ყოველი წევრი არის წინა ორი ელემენტის
ჯამი. მაგალითად, ფიბონაჩის რიცხვებია {0: 1, 1: 1, 2: 2, 3: 3, 4: 5, 5: 8, 6: 13, 7: 21, 8: 34, 9:
55, 10: 89}'''

# x = randrange(20)
# print(x)

# def func(num):
#     a = 0
#     b = 1
#     fib = {}
#     for i in range(1, num+1):
#         fib[i] = a + b
#         c = a + b
#         a = b
#         b = c
#     return fib
# print(func(x))

